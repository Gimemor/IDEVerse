// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using IDEVerseDb;

namespace IDEVerse.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20200624091602_20200624_SeededRights")]
    partial class _20200624_SeededRights
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IDEVerseDb.RightToRole", b =>
                {
                    b.Property<Guid>("RightId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("RightId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RightToRole","Authorization");
                });

            modelBuilder.Entity("IDEVerseDb.ScheduleAttendance", b =>
                {
                    b.Property<Guid>("ScheduleEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScheduleEntryId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("ScheduleEntryId", "UserId");

                    b.HasIndex("ScheduleEntryId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("ScheduleAttendance","Study");
                });

            modelBuilder.Entity("IDEVerseDb.ScheduleEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Schedule","Study");
                });

            modelBuilder.Entity("IDEVerseDb.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects","Study");
                });

            modelBuilder.Entity("IDEVerseDb.SubjectAssignment", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SubjectAssignments","Study");
                });

            modelBuilder.Entity("IDEVerseDb.SubjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tasks","Study");
                });

            modelBuilder.Entity("IDEVerseDb.TaskGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskGrades","Study");
                });

            modelBuilder.Entity("IDEVerseDb.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users","Authorization");
                });

            modelBuilder.Entity("IDEVerseDb.UserRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Mnemo")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rights","Authorization");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72f59bc4-47f8-4e7a-8fb5-7e1380cbe072"),
                            Description = "Доступ к панели управления",
                            Mnemo = "right.IDEVerse/control-panel-access",
                            Title = "Доступ к панели управления"
                        },
                        new
                        {
                            Id = new Guid("eae48cab-2b37-4200-aef6-5870f6ec21c1"),
                            Description = "Доступ к расписанию",
                            Mnemo = "right.IDEVerse/schedule-access",
                            Title = "Доступ к панели управления"
                        });
                });

            modelBuilder.Entity("IDEVerseDb.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Mnemo")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles","Authorization");
                });

            modelBuilder.Entity("IDEVerseDb.RightToRole", b =>
                {
                    b.HasOne("IDEVerseDb.UserRight", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.UserRole", "Role")
                        .WithMany("Rights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDEVerseDb.ScheduleAttendance", b =>
                {
                    b.HasOne("IDEVerseDb.ScheduleEntry", "ScheduleEntry")
                        .WithMany()
                        .HasForeignKey("ScheduleEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.ScheduleEntry", null)
                        .WithMany("Attendance")
                        .HasForeignKey("ScheduleEntryId1");

                    b.HasOne("IDEVerseDb.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.User", null)
                        .WithMany("Attendance")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("IDEVerseDb.ScheduleEntry", b =>
                {
                    b.HasOne("IDEVerseDb.Subject", "Subject")
                        .WithMany("SubjectLessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDEVerseDb.SubjectAssignment", b =>
                {
                    b.HasOne("IDEVerseDb.Subject", "Subject")
                        .WithMany("SubjectAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.User", "User")
                        .WithMany("SubjectAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDEVerseDb.SubjectTask", b =>
                {
                    b.HasOne("IDEVerseDb.Subject", "Subject")
                        .WithMany("Tasks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDEVerseDb.TaskGrade", b =>
                {
                    b.HasOne("IDEVerseDb.SubjectTask", "Task")
                        .WithMany("Grades")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDEVerseDb.User", "User")
                        .WithMany("Grades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDEVerseDb.User", b =>
                {
                    b.HasOne("IDEVerseDb.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
